/**
 * ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Central MCP Server
 * Main test runner for all Central MCP Server tests
 */

const { runAllTests } = require('./test-example');
const { runPerformanceTests } = require('./performance-test');
const { runSecurityTests } = require('./security-test');
const { runUITests } = require('./ui-test');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const TEST_CONFIG = {
    baseUrl: process.env.BASE_URL || 'http://localhost:3000',
    adminToken: process.env.ADMIN_TOKEN || 'your-admin-token-here',
    serverToken: process.env.SERVER_TOKEN || 'your-server-token-here',
    timeout: parseInt(process.env.TEST_TIMEOUT) || 30000,
    skipPerformance: process.env.SKIP_PERFORMANCE === 'true',
    skipSecurity: process.env.SKIP_SECURITY === 'true',
    skipUI: process.env.SKIP_UI === 'true'
};

// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏ß‡∏°
let overallStats = {
    startTime: null,
    endTime: null,
    totalDuration: 0,
    testSuites: {
        functional: { status: 'pending', duration: 0, error: null },
        performance: { status: 'pending', duration: 0, error: null },
        security: { status: 'pending', duration: 0, error: null },
        ui: { status: 'pending', duration: 0, error: null }
    },
    summary: {
        total: 0,
        passed: 0,
        failed: 0,
        skipped: 0
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
function displayConfiguration() {
    console.log('‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('=' .repeat(50));
    console.log(`üåê Base URL: ${TEST_CONFIG.baseUrl}`);
    console.log(`‚è±Ô∏è Timeout: ${TEST_CONFIG.timeout}ms`);
    console.log(`üîë Admin Token: ${TEST_CONFIG.adminToken !== 'your-admin-token-here' ? '‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'}`);
    console.log(`üîê Server Token: ${TEST_CONFIG.serverToken !== 'your-server-token-here' ? '‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'}`);
    console.log(`üöÄ Performance Tests: ${TEST_CONFIG.skipPerformance ? '‚ùå ‡∏Ç‡πâ‡∏≤‡∏°' : '‚úÖ ‡∏£‡∏±‡∏ô'}`);
    console.log(`üõ°Ô∏è Security Tests: ${TEST_CONFIG.skipSecurity ? '‚ùå ‡∏Ç‡πâ‡∏≤‡∏°' : '‚úÖ ‡∏£‡∏±‡∏ô'}`);
    console.log(`üñ•Ô∏è UI Tests: ${TEST_CONFIG.skipUI ? '‚ùå ‡∏Ç‡πâ‡∏≤‡∏°' : '‚úÖ ‡∏£‡∏±‡∏ô'}`);
    console.log('');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
async function runTestSuite(suiteName, testFunction, skipCondition = false) {
    if (skipCondition) {
        console.log(`‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${suiteName}`);
        overallStats.testSuites[suiteName.toLowerCase()].status = 'skipped';
        overallStats.summary.skipped++;
        return;
    }
    
    console.log(`\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${suiteName}...`);
    console.log('=' .repeat(60));
    
    const startTime = Date.now();
    
    try {
        await testFunction();
        const duration = Date.now() - startTime;
        
        overallStats.testSuites[suiteName.toLowerCase()].status = 'completed';
        overallStats.testSuites[suiteName.toLowerCase()].duration = duration;
        overallStats.summary.passed++;
        
        console.log(`\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${suiteName} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (${duration}ms)`);
        
    } catch (error) {
        const duration = Date.now() - startTime;
        
        overallStats.testSuites[suiteName.toLowerCase()].status = 'failed';
        overallStats.testSuites[suiteName.toLowerCase()].duration = duration;
        overallStats.testSuites[suiteName.toLowerCase()].error = error.message;
        overallStats.summary.failed++;
        
        console.error(`\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${suiteName} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (${duration}ms):`, error.message);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
async function checkServerConnection() {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...');
    
    try {
        const axios = require('axios');
        const response = await axios.get(`${TEST_CONFIG.baseUrl}/health`, {
            timeout: 5000,
            validateStatus: () => true
        });
        
        if (response.status === 200) {
            console.log('‚úÖ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥');
            return true;
        } else {
            console.log(`‚ùå ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô status ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: ${error.message}`);
        return false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏ß‡∏°
function displayOverallSummary() {
    console.log('\n\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    console.log('=' .repeat(70));
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    console.log(`‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${overallStats.totalDuration}ms (${(overallStats.totalDuration / 1000).toFixed(2)}s)`);
    console.log(`üïê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤: ${overallStats.startTime}`);
    console.log(`üïê ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤: ${overallStats.endTime}`);
    
    console.log('\nüìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ test suite
    Object.entries(overallStats.testSuites).forEach(([suite, data]) => {
        const statusIcon = {
            'completed': '‚úÖ',
            'failed': '‚ùå',
            'skipped': '‚è≠Ô∏è',
            'pending': '‚è≥'
        }[data.status] || '‚ùì';
        
        console.log(`${statusIcon} ${suite.toUpperCase()}: ${data.status} (${data.duration}ms)`);
        if (data.error) {
            console.log(`   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.error}`);
        }
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    console.log('\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:');
    console.log(`‚úÖ ‡∏ú‡πà‡∏≤‡∏ô: ${overallStats.summary.passed}`);
    console.log(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${overallStats.summary.failed}`);
    console.log(`‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°: ${overallStats.summary.skipped}`);
    console.log(`üìä ‡∏£‡∏ß‡∏°: ${overallStats.summary.total}`);
    
    const successRate = overallStats.summary.total > 0 
        ? ((overallStats.summary.passed / overallStats.summary.total) * 100).toFixed(2)
        : 0;
    console.log(`üéØ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successRate}%`);
    
    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    console.log('\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
    if (overallStats.summary.failed === 0) {
        console.log('- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô! üéâ');
    } else {
        console.log('- ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö');
        if (overallStats.testSuites.functional.status === 'failed') {
            console.log('- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö');
        }
        if (overallStats.testSuites.performance.status === 'failed') {
            console.log('- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö');
        }
        if (overallStats.testSuites.security.status === 'failed') {
            console.log('- ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö');
        }
        if (overallStats.testSuites.ui.status === 'failed') {
            console.log('- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á UI ‡πÅ‡∏•‡∏∞ Dashboard');
        }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD
    console.log('\nü§ñ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD:');
    console.log(`Exit Code: ${overallStats.summary.failed > 0 ? 1 : 0}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
function saveTestResults() {
    const fs = require('fs');
    const path = require('path');
    
    const resultsDir = path.join(__dirname, 'test-results');
    if (!fs.existsSync(resultsDir)) {
        fs.mkdirSync(resultsDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const resultsFile = path.join(resultsDir, `test-results-${timestamp}.json`);
    
    try {
        fs.writeFileSync(resultsFile, JSON.stringify(overallStats, null, 2));
        console.log(`\nüíæ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: ${resultsFile}`);
    } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: ${error.message}`);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function runAllTestSuites() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Central MCP Server ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n');
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    overallStats.startTime = new Date().toISOString();
    const startTime = Date.now();
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
    displayConfiguration();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    const serverConnected = await checkServerConnection();
    if (!serverConnected) {
        console.log('\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
        console.log('üí° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm start');
        process.exit(1);
    }
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô test suites ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    overallStats.summary.total = 4 - 
        (TEST_CONFIG.skipPerformance ? 1 : 0) - 
        (TEST_CONFIG.skipSecurity ? 1 : 0) - 
        (TEST_CONFIG.skipUI ? 1 : 0);
    
    try {
        // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        await runTestSuite('Functional', runAllTests);
        await runTestSuite('Performance', runPerformanceTests, TEST_CONFIG.skipPerformance);
        await runTestSuite('Security', runSecurityTests, TEST_CONFIG.skipSecurity);
        await runTestSuite('UI', runUITests, TEST_CONFIG.skipUI);
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    overallStats.endTime = new Date().toISOString();
    overallStats.totalDuration = Date.now() - startTime;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    displayOverallSummary();
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    saveTestResults();
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    
    // Exit ‡∏î‡πâ‡∏ß‡∏¢ code ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    process.exit(overallStats.summary.failed > 0 ? 1 : 0);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function showHelp() {
    console.log('üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Central MCP Server Test Runner\n');
    console.log('‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    console.log('  node run-all-tests.js                 # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    console.log('  npm run test:all                      # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ script)');
    console.log('');
    console.log('Environment Variables:');
    console.log('  BASE_URL=http://localhost:3000        # URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
    console.log('  ADMIN_TOKEN=your-token                # Admin token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authentication');
    console.log('  SERVER_TOKEN=your-token               # Server token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authentication');
    console.log('  TEST_TIMEOUT=30000                    # Timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (ms)');
    console.log('  SKIP_PERFORMANCE=true                 # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û');
    console.log('  SKIP_SECURITY=true                    # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢');
    console.log('  SKIP_UI=true                          # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö UI');
    console.log('');
    console.log('‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
    console.log('  BASE_URL=http://localhost:3000 ADMIN_TOKEN=abc123 node run-all-tests.js');
    console.log('  SKIP_PERFORMANCE=true SKIP_SECURITY=true node run-all-tests.js');
    console.log('');
    console.log('‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:');
    console.log('  node test-example.js                  # ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô');
    console.log('  node performance-test.js              # ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û');
    console.log('  node security-test.js                 # ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢');
    console.log('  node ui-test.js                       # ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö UI');
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö command line arguments
if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showHelp();
    process.exit(0);
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    runAllTestSuites().catch(error => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á:', error.message);
        process.exit(1);
    });
}

module.exports = {
    runAllTestSuites,
    displayConfiguration,
    checkServerConnection,
    displayOverallSummary,
    saveTestResults,
    showHelp,
    TEST_CONFIG,
    overallStats
};