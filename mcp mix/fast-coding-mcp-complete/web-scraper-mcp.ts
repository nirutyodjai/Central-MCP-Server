/**
 * Web Scraper MCP Server
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MCP Platform
 */

import axios from 'axios';
import * as cheerio from 'cheerio';
import * as fs from 'fs';
import * as path from 'path';

export interface ScrapingConfig {
  userAgent?: string;
  timeout: number;
  maxRetries: number;
  delayBetweenRequests: number;
  enableCache: boolean;
  cacheDuration: number; // milliseconds
}

export interface ScrapingResult {
  url: string;
  title?: string;
  content?: string;
  links: string[];
  images: string[];
  metadata: {
    statusCode: number;
    responseTime: number;
    contentLength?: number;
    lastModified?: string;
  };
  scrapedAt: string;
  success: boolean;
  error?: string;
}

export interface ScrapingOptions {
  includeImages?: boolean;
  includeLinks?: boolean;
  maxContentLength?: number;
  selectors?: {
    title?: string;
    content?: string;
    links?: string;
    images?: string;
  };
  headers?: Record<string, string>;
}

export class WebScraperMCPServer {
  private config: ScrapingConfig;
  private cache: Map<string, { data: ScrapingResult; expires: number }>;
  private isInitialized: boolean = false;

  constructor(config: ScrapingConfig) {
    this.config = config;
    this.cache = new Map();
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Scraper MCP Server
   */
  async initialize(): Promise<void> {
    console.log('üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Web Scraper MCP Server...');

    // ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    if (this.config.enableCache) {
      this.cleanExpiredCache();
      console.log('üíæ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web scraping');
    }

    this.isInitialized = true;
    console.log('‚úÖ Web Scraper MCP Server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL
   */
  async scrapeUrl(url: string, options: ScrapingOptions = {}): Promise<ScrapingResult> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const startTime = Date.now();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
    if (this.config.enableCache) {
      const cached = this.getCachedResult(url);
      if (cached) {
        console.log(`üíæ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${url}`);
        return cached;
      }
    }

    try {
      console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á scrape: ${url}`);

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ headers
      const headers = {
        'User-Agent': this.config.userAgent || 'MCP-WebScraper/1.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        ...options.headers
      };

      // ‡∏™‡πà‡∏á HTTP request
      const response = await axios.get(url, {
        headers,
        timeout: this.config.timeout,
        maxRedirects: 5,
        validateStatus: (status) => status < 400
      });

      const responseTime = Date.now() - startTime;

      // ‡πÇ‡∏´‡∏•‡∏î HTML ‡∏î‡πâ‡∏ß‡∏¢ cheerio
      const $ = cheerio.load(response.data);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° options
      const result: ScrapingResult = {
        url,
        title: this.extractTitle($, options),
        content: this.extractContent($, options),
        links: options.includeLinks !== false ? this.extractLinks($, url, options) : [],
        images: options.includeImages !== false ? this.extractImages($, url, options) : [],
        metadata: {
          statusCode: response.status,
          responseTime,
          contentLength: response.data.length,
          lastModified: response.headers['last-modified']
        },
        scrapedAt: new Date().toISOString(),
        success: true
      };

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô cache
      if (this.config.enableCache) {
        this.setCachedResult(url, result);
      }

      console.log(`‚úÖ Scrape ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${url} (${responseTime}ms)`);
      return result;

    } catch (error) {
      const responseTime = Date.now() - startTime;

      const errorResult: ScrapingResult = {
        url,
        links: [],
        images: [],
        metadata: {
          statusCode: 0,
          responseTime
        },
        scrapedAt: new Date().toISOString(),
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };

      console.error(`‚ùå Scrape ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${url}`, error);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡πÉ‡∏ô cache ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      if (this.config.enableCache) {
        this.setCachedResult(url, errorResult);
      }

      return errorResult;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á title ‡∏à‡∏≤‡∏Å HTML
   */
  private extractTitle($: cheerio.CheerioAPI, options: ScrapingOptions): string | undefined {
    const selector = options.selectors?.title || 'title';
    return $(selector).first().text().trim() || undefined;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å HTML
   */
  private extractContent($: cheerio.CheerioAPI, options: ScrapingOptions): string | undefined {
    const selector = options.selectors?.content || 'body';
    const $element = $(selector).first();

    // ‡∏•‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏≠‡∏≠‡∏Å
    $element.find('script, style, nav, header, footer, aside').remove();

    const content = $element.text().trim();

    if (options.maxContentLength) {
      return content.substring(0, options.maxContentLength);
    }

    return content || undefined;
  }

  /**
   * ‡∏î‡∏∂‡∏á links ‡∏à‡∏≤‡∏Å HTML
   */
  private extractLinks($: cheerio.CheerioAPI, baseUrl: string, options: ScrapingOptions): string[] {
    const selector = options.selectors?.links || 'a[href]';
    const links: string[] = [];

    $(selector).each((_, element) => {
      const href = $(element).attr('href');
      if (href) {
        try {
          const absoluteUrl = new URL(href, baseUrl).href;
          links.push(absoluteUrl);
        } catch {
          // ‡∏Ç‡πâ‡∏≤‡∏° links ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà valid
        }
      }
    });

    // ‡∏•‡∏ö duplicates ‡πÅ‡∏•‡∏∞ external links ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    return [...new Set(links)];
  }

  /**
   * ‡∏î‡∏∂‡∏á images ‡∏à‡∏≤‡∏Å HTML
   */
  private extractImages($: cheerio.CheerioAPI, baseUrl: string, options: ScrapingOptions): string[] {
    const selector = options.selectors?.images || 'img[src]';
    const images: string[] = [];

    $(selector).each((_, element) => {
      const src = $(element).attr('src');
      if (src) {
        try {
          const absoluteUrl = new URL(src, baseUrl).href;
          images.push(absoluteUrl);
        } catch {
          // ‡∏Ç‡πâ‡∏≤‡∏° images ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà valid
        }
      }
    });

    return [...new Set(images)];
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ URLs ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
   */
  async scrapeMultipleUrls(urls: string[], options: ScrapingOptions = {}): Promise<ScrapingResult[]> {
    console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á scrape ${urls.length} URLs ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô...`);

    // ‡∏£‡∏≠ delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á requests ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå block
    const results: ScrapingResult[] = [];

    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      const result = await this.scrapeUrl(url, options);
      results.push(result);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á requests (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô request ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
      if (i < urls.length - 1 && this.config.delayBetweenRequests > 0) {
        await new Promise(resolve => setTimeout(resolve, this.config.delayBetweenRequests));
      }
    }

    const successCount = results.filter(r => r.success).length;
    console.log(`‚úÖ Scrape ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${successCount}/${urls.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    return results;
  }

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° pattern
   */
  async searchAndScrape(searchQuery: string, options: {
    maxResults?: number;
    site?: string;
    scrapeOptions?: ScrapingOptions;
  } = {}): Promise<ScrapingResult[]> {
    console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞ scrape: "${searchQuery}"`);

    // ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ search engine API ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
    // ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const mockResults = [
      `https://example.com/search?q=${encodeURIComponent(searchQuery)}`,
      `https://test.com/results?search=${encodeURIComponent(searchQuery)}`
    ];

    const urls = options.site
      ? [`${options.site}?q=${encodeURIComponent(searchQuery)}`]
      : mockResults;

    const limitedUrls = urls.slice(0, options.maxResults || 5);

    return await this.scrapeMultipleUrls(limitedUrls, options.scrapeOptions || {});
  }

  /**
   * ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
   */
  async downloadContent(url: string, savePath?: string): Promise<boolean> {
    try {
      const result = await this.scrapeUrl(url);

      if (!result.success || !result.content) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å: ${url}`);
        return false;
      }

      const filePath = savePath || path.join(process.cwd(), 'data', 'scraped', `${Date.now()}.txt`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      const dir = path.dirname(filePath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
      const content = [
        `URL: ${result.url}`,
        `Title: ${result.title || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'}`,
        `Scraped At: ${result.scrapedAt}`,
        `Status: ${result.metadata.statusCode}`,
        `Response Time: ${result.metadata.responseTime}ms`,
        '',
        'Content:',
        '========',
        result.content
      ].join('\n');

      fs.writeFileSync(filePath, content, 'utf-8');
      console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà: ${filePath}`);

      return true;
    } catch (error) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:`, error);
      return false;
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cache
   */
  private setCachedResult(url: string, result: ScrapingResult): void {
    this.cache.set(url, {
      data: result,
      expires: Date.now() + this.config.cacheDuration
    });
  }

  private getCachedResult(url: string): ScrapingResult | null {
    const cached = this.cache.get(url);
    if (cached && cached.expires > Date.now()) {
      return cached.data;
    }

    if (cached) {
      this.cache.delete(url); // ‡∏•‡∏ö cache ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    }

    return null;
  }

  private cleanExpiredCache(): void {
    const now = Date.now();
    for (const [url, cached] of this.cache.entries()) {
      if (cached.expires <= now) {
        this.cache.delete(url);
      }
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ scraping
   */
  getScrapingStats(): any {
    const cacheSize = this.cache.size;
    const expiredCount = Array.from(this.cache.values()).filter(c => c.expires <= Date.now()).length;

    return {
      cacheSize,
      expiredEntries: expiredCount,
      activeEntries: cacheSize - expiredCount,
      cacheDuration: this.config.cacheDuration,
      isEnabled: this.config.enableCache
    };
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  clearCache(): void {
    this.cache.clear();
    console.log('üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á cache ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö launch Web Scraper MCP Server
 */
export async function launchWebScraperMCP(gitMemory: any, platform: any): Promise<WebScraperMCPServer> {
  console.log('üï∏Ô∏è Launching Web Scraper MCP Server...');

  const scraperServer = new WebScraperMCPServer({
    userAgent: 'MCP-WebScraper/1.0 (Development)',
    timeout: 30000,
    maxRetries: 3,
    delayBetweenRequests: 1000,
    enableCache: true,
    cacheDuration: 5 * 60 * 1000 // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  });

  try {
    await scraperServer.initialize();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const stats = scraperServer.getScrapingStats();
    console.log('üìä Web Scraper Stats:', stats);

    console.log('‚úÖ Web Scraper MCP Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    return scraperServer;
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Scraper MCP Server:', error);
    throw error;
  }
}
