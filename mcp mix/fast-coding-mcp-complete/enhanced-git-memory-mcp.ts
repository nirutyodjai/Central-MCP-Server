/**
 * Enhanced Git Memory MCP Server with High-Performance Memory Management
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Git repositories ‡πÅ‡∏•‡∏∞ code history ‡∏û‡∏£‡πâ‡∏≠‡∏° memory sharing ‡πÅ‡∏•‡∏∞ optimization
 */

import { HighPerformanceCache } from './high-performance-cache.js';
import { HighPerformanceAsyncUtils } from './high-performance-async.js';

import simpleGit, { SimpleGit } from 'simple-git';
import * as fs from 'fs';
import * as path from 'path';

export interface CommitInfo {
  hash: string;
  message: string;
  author: string;
  date: string;
  files: string[];
  insertions: number;
  deletions: number;
}

export interface GitStatus {
  branch: string;
  isClean: boolean;
  ahead: number;
  behind: number;
  modified: string[];
  staged: string[];
  untracked: string[];
}

export interface GitMemoryConfig {
  repositoryPath: string;
  enableHistory: boolean;
  maxCommits: number;
  enableBranchTracking: boolean;
  enableMemorySharing: boolean;
  maxMemoryEntries: number;
  memoryTTL: number;
  enablePerformanceMode: boolean;
}

export interface GitMemoryEntry {
  id: string;
  type: 'commit' | 'branch' | 'file' | 'repository';
  data: any;
  metadata: {
    repository: string;
    branch?: string;
    timestamp: string;
    size: number;
  };
  shared: boolean;
  lastAccessed: string;
}

export class EnhancedGitMemoryMCPServer {
  private git: SimpleGit;
  private config: GitMemoryConfig;
  private isInitialized: boolean = false;
  private cache: HighPerformanceCache;
  private memoryStore: Map<string, GitMemoryEntry> = new Map();
  private sharedMemory: Map<string, GitMemoryEntry> = new Map();

  constructor(config: GitMemoryConfig) {
    this.config = config;
    this.git = simpleGit(config.repositoryPath);

    // Initialize high-performance cache
    this.cache = new HighPerformanceCache({
      memory: {
        enabled: true,
        maxKeys: config.maxMemoryEntries,
        stdTTL: config.memoryTTL / 1000,
        checkperiod: 60,
        useClones: false,
        deleteOnExpire: true
      },
      compression: {
        enabled: true,
        threshold: 1024,
        algorithm: 'gzip'
      },
      strategy: {
        defaultTTL: config.memoryTTL,
        maxSize: config.maxMemoryEntries,
        enableMetrics: true,
        enableCompression: true
      }
    });
  }

  /**
   * Initialize enhanced Git Memory server with memory management
   */
  async initialize(): Promise<void> {
    try {
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Enhanced Git Memory MCP Server...');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Git repository ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isRepo = await this.git.checkIsRepo();
      if (!isRepo) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Git repository ‡πÉ‡∏ô path ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô memory
      await this.loadRepositoryInfo();

      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ memory sharing ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      if (this.config.enableMemorySharing) {
        await this.initializeMemorySharing();
      }

      this.isInitialized = true;
      console.log('‚úÖ Enhanced Git Memory MCP Server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');

    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Enhanced Git Memory MCP Server:', error);
      throw error;
    }
  }

  /**
   * Load repository information into memory with caching
   */
  private async loadRepositoryInfo(): Promise<void> {
    const cacheKey = `repo_info_${this.config.repositoryPath}`;

    // Check cache first
    const cached = await this.cache.get(cacheKey);
    if (cached) {
      console.log('üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository ‡∏à‡∏≤‡∏Å cache');
      return;
    }

    try {
      const remotes = await this.git.getRemotes(true);
      const branch = await this.git.branch();

      const repoInfo = {
        path: this.config.repositoryPath,
        currentBranch: branch.current,
        branches: Object.keys(branch.branches).length,
        remotes: remotes.map(remote => ({
          name: remote.name,
          url: remote.refs.fetch || remote.refs.push
        })),
        timestamp: new Date().toISOString()
      };

      // Cache repository info
      await this.cache.set(cacheKey, repoInfo, this.config.memoryTTL);

      console.log('üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô cache');

    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository:', error);
      throw error;
    }
  }

  /**
   * Initialize memory sharing capabilities
   */
  private async initializeMemorySharing(): Promise<void> {
    console.log('üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Memory Sharing...');

    // Create shared memory space for inter-session communication
    this.sharedMemory = new Map();

    // Setup periodic memory synchronization
    setInterval(() => {
      this.synchronizeSharedMemory();
    }, 30000); // Every 30 seconds

    console.log('‚úÖ Memory Sharing ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  }

  /**
   * Synchronize shared memory across sessions
   */
  private synchronizeSharedMemory(): void {
    // Sync memory entries that are marked as shared
    for (const [key, entry] of this.memoryStore) {
      if (entry.shared && this.config.enableMemorySharing) {
        this.sharedMemory.set(key, entry);
      }
    }

    // Clean up expired shared memory
    const now = Date.now();
    for (const [key, entry] of this.sharedMemory) {
      if (now - new Date(entry.lastAccessed).getTime() > this.config.memoryTTL) {
        this.sharedMemory.delete(key);
      }
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Git status ‡∏û‡∏£‡πâ‡∏≠‡∏° memory caching
   */
  async getStatus(): Promise<GitStatus> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const cacheKey = 'git_status';

    try {
      // Check cache first
      const cached = await this.cache.get<GitStatus>(cacheKey);
      if (cached) {
        console.log('üíæ ‡πÇ‡∏´‡∏•‡∏î Git status ‡∏à‡∏≤‡∏Å cache');
        return cached;
      }

      const status = await this.git.status();
      const branch = await this.git.branch();

      const statusInfo: GitStatus = {
        branch: branch.current,
        isClean: status.isClean(),
        ahead: status.ahead,
        behind: status.behind,
        modified: status.modified,
        staged: status.staged,
        untracked: status.not_added
      };

      // Cache status for fast access
      await this.cache.set(cacheKey, statusInfo, 30000); // 30 seconds

      return statusInfo;
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Git status:', error);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ commits ‡∏û‡∏£‡πâ‡∏≠‡∏° memory optimization
   */
  async getCommitHistory(limit?: number): Promise<CommitInfo[]> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const maxCommits = limit || this.config.maxCommits;
    const cacheKey = `commit_history_${maxCommits}`;

    try {
      // Check cache first
      const cached = await this.cache.get<CommitInfo[]>(cacheKey);
      if (cached) {
        console.log('üíæ ‡πÇ‡∏´‡∏•‡∏î commit history ‡∏à‡∏≤‡∏Å cache');
        return cached;
      }

      const logs = await this.git.log({ maxCount: maxCommits });

      const commits: CommitInfo[] = logs.all.map(commit => ({
        hash: commit.hash.substring(0, 7),
        message: commit.message,
        author: commit.author_name,
        date: commit.date,
        files: [], // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á parse ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        insertions: 0,
        deletions: 0
      }));

      // Cache commit history
      await this.cache.set(cacheKey, commits, this.config.memoryTTL);

      return commits;
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á commit history:', error);
      throw error;
    }
  }

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ commits ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏° async optimization
   */
  async searchCommits(query: string, limit: number = 50): Promise<CommitInfo[]> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const cacheKey = `search_commits_${query}_${limit}`;

    try {
      // Check cache first
      const cached = await this.cache.get<CommitInfo[]>(cacheKey);
      if (cached) {
        console.log('üíæ ‡πÇ‡∏´‡∏•‡∏î search results ‡∏à‡∏≤‡∏Å cache');
        return cached;
      }

      // Use async optimization for search
      const searchTask = {
        id: `search_${Date.now()}`,
        type: 'git-search',
        data: { query, limit },
        priority: 5,
        timeout: 10000
      };

      const result = await HighPerformanceAsyncUtils.executeWithWorker(searchTask);

      if (result.success && result.data) {
        const commits: CommitInfo[] = result.data;

        // Cache search results
        await this.cache.set(cacheKey, commits, this.config.memoryTTL);

        return commits;
      }

      return [];
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ commits:', error);
      throw error;
    }
  }

  /**
   * ‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Git ‡πÉ‡∏ô memory ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á sessions
   */
  async shareMemoryEntry(key: string, data: any, type: GitMemoryEntry['type']): Promise<void> {
    if (!this.config.enableMemorySharing) {
      throw new Error('Memory sharing ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    }

    const entry: GitMemoryEntry = {
      id: key,
      type,
      data,
      metadata: {
        repository: this.config.repositoryPath,
        timestamp: new Date().toISOString(),
        size: JSON.stringify(data).length
      },
      shared: true,
      lastAccessed: new Date().toISOString()
    };

    // Store in local memory
    this.memoryStore.set(key, entry);

    // Store in shared memory
    this.sharedMemory.set(key, entry);

    console.log(`üì§ ‡πÅ‡∏ä‡∏£‡πå memory entry: ${key} (${type})`);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡∏à‡∏≤‡∏Å memory
   */
  async getSharedMemoryEntry(key: string): Promise<GitMemoryEntry | null> {
    if (!this.config.enableMemorySharing) {
      return null;
    }

    const entry = this.sharedMemory.get(key);
    if (entry) {
      // Update last accessed time
      entry.lastAccessed = new Date().toISOString();
      return entry;
    }

    return null;
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async getAllSharedMemory(): Promise<GitMemoryEntry[]> {
    if (!this.config.enableMemorySharing) {
      return [];
    }

    return Array.from(this.sharedMemory.values());
  }

  /**
   * ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏° memory tracking
   */
  async switchBranch(branchName: string): Promise<boolean> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    try {
      // Store current branch state in memory
      if (this.config.enableMemorySharing) {
        const currentStatus = await this.getStatus();
        await this.shareMemoryEntry(
          `branch_state_${Date.now()}`,
          currentStatus,
          'branch'
        );
      }

      await this.git.checkout(branchName);

      // Clear related caches when switching branches
      await this.cache.delete('git_status');
      await this.cache.delete('commit_history_*');

      console.log(`üîÑ ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch: ${branchName}`);

      return true;
    } catch (error) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch ${branchName}:`, error);
      return false;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏° performance optimization
   */
  async getDevelopmentStats(author?: string): Promise<any> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const cacheKey = `dev_stats_${author || 'all'}`;

    try {
      // Check cache first
      const cached = await this.cache.get(cacheKey);
      if (cached) {
        return cached;
      }

      const options: any = { maxCount: 1000 };
      if (author) {
        options['--author'] = author;
      }

      const logs = await this.git.log(options);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      const totalCommits = logs.all.length;
      const authors = new Set(logs.all.map(commit => commit.author_name));
      const filesChanged = new Set();

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
      logs.all.forEach(commit => {
        filesChanged.add('multiple');
      });

      const stats = {
        totalCommits,
        uniqueAuthors: authors.size,
        filesChanged: filesChanged.size,
        dateRange: {
          earliest: logs.all.length > 0 ? logs.all[logs.all.length - 1].date : null,
          latest: logs.all.length > 0 ? logs.all[0].date : null
        },
        memoryEntries: this.memoryStore.size,
        sharedEntries: this.sharedMemory.size,
        cacheStats: this.cache.getStats()
      };

      // Cache development stats
      await this.cache.set(cacheKey, stats, this.config.memoryTTL);

      return stats;
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:', error);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository ‡∏û‡∏£‡πâ‡∏≠‡∏° memory management
   */
  async getRepositoryInfo(): Promise<any> {
    if (!this.isInitialized) {
      await this.initialize();
    }

    const cacheKey = 'repository_info';

    try {
      // Check cache first
      const cached = await this.cache.get(cacheKey);
      if (cached) {
        return cached;
      }

      const remotes = await this.git.getRemotes(true);
      const branch = await this.git.branch();

      const info = {
        path: this.config.repositoryPath,
        currentBranch: branch.current,
        branches: Object.keys(branch.branches).length,
        remotes: remotes.map(remote => ({
          name: remote.name,
          url: remote.refs.fetch || remote.refs.push
        })),
        isInitialized: this.isInitialized,
        memoryEnabled: this.config.enableMemorySharing,
        memoryEntries: this.memoryStore.size,
        sharedEntries: this.sharedMemory.size,
        performanceMode: this.config.enablePerformanceMode
      };

      // Cache repository info
      await this.cache.set(cacheKey, info, this.config.memoryTTL);

      return info;
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository:', error);
      throw error;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á performance metrics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring
   */
  getPerformanceMetrics(): any {
    return {
      memoryStore: {
        totalEntries: this.memoryStore.size,
        sharedEntries: this.sharedMemory.size,
        maxEntries: this.config.maxMemoryEntries
      },
      cache: this.cache.getStats(),
      git: {
        repositoryPath: this.config.repositoryPath,
        performanceMode: this.config.enablePerformanceMode,
        memorySharing: this.config.enableMemorySharing
      },
      timestamp: new Date().toISOString()
    };
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á memory ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  cleanupMemory(): void {
    const now = Date.now();

    // Clean local memory
    for (const [key, entry] of this.memoryStore) {
      if (now - new Date(entry.lastAccessed).getTime() > this.config.memoryTTL) {
        this.memoryStore.delete(key);
      }
    }

    // Clean shared memory
    for (const [key, entry] of this.sharedMemory) {
      if (now - new Date(entry.lastAccessed).getTime() > this.config.memoryTTL) {
        this.sharedMemory.delete(key);
      }
    }

    console.log(`üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á memory ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (local: ${this.memoryStore.size}, shared: ${this.sharedMemory.size})`);
  }

  /**
   * Health check ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö memory ‡πÅ‡∏•‡∏∞ performance
   */
  async healthCheck(): Promise<{
    git: boolean;
    memory: boolean;
    cache: boolean;
    sharing: boolean;
  }> {
    const health = {
      git: false,
      memory: false,
      cache: false,
      sharing: false
    };

    try {
      // Check Git repository
      const isRepo = await this.git.checkIsRepo();
      health.git = isRepo;

      // Check memory systems
      health.memory = this.memoryStore.size <= this.config.maxMemoryEntries;
      health.cache = await this.cache.healthCheck().then(h => h.memory);

      // Check memory sharing
      health.sharing = this.config.enableMemorySharing ?
        this.sharedMemory.size >= 0 : true; // Always true if disabled

      return health;
    } catch (error) {
      console.error('‚ùå Health check failed:', error);
      return health;
    }
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö launch Enhanced Git Memory MCP Server
 */
export async function launchEnhancedGitMemoryMCP(gitMemory: any, platform: any): Promise<EnhancedGitMemoryMCPServer> {
  console.log('üöÄ Launching Enhanced Git Memory MCP Server...');

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á Git repository (‡πÉ‡∏ä‡πâ current directory ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)
  const repoPath = process.cwd();

  const gitMemoryServer = new EnhancedGitMemoryMCPServer({
    repositoryPath: repoPath,
    enableHistory: true,
    maxCommits: 100,
    enableBranchTracking: true,
    enableMemorySharing: true,
    maxMemoryEntries: 1000,
    memoryTTL: 300000, // 5 minutes
    enablePerformanceMode: true
  });

  try {
    await gitMemoryServer.initialize();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• repository ‡∏ó‡∏µ‡πà‡∏û‡∏ö
    const repoInfo = await gitMemoryServer.getRepositoryInfo();
    console.log('üìã Repository Info:', repoInfo);

    // ‡πÅ‡∏™‡∏î‡∏á Git status
    const status = await gitMemoryServer.getStatus();
    console.log('üìä Git Status:', status);

    // ‡πÅ‡∏™‡∏î‡∏á performance metrics
    const metrics = gitMemoryServer.getPerformanceMetrics();
    console.log('‚ö° Performance Metrics:', metrics);

    console.log('‚úÖ Enhanced Git Memory MCP Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    return gitMemoryServer;
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Enhanced Git Memory MCP Server:', error);
    throw error;
  }
}
