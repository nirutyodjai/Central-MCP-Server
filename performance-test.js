/**
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Central MCP Server
 * Performance test file for Central MCP Server
 */

const axios = require('axios');
const { performance } = require('perf_hooks');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const BASE_URL = 'http://localhost:3000';
const CONCURRENT_REQUESTS = 10;
const TEST_DURATION = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
let stats = {
    totalRequests: 0,
    successfulRequests: 0,
    failedRequests: 0,
    totalResponseTime: 0,
    minResponseTime: Infinity,
    maxResponseTime: 0,
    errors: []
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
async function measureResponseTime(url, method = 'GET', data = null) {
    const startTime = performance.now();
    try {
        const config = {
            method,
            url,
            timeout: 5000
        };
        
        if (data && method !== 'GET') {
            config.data = data;
        }
        
        const response = await axios(config);
        const endTime = performance.now();
        const responseTime = endTime - startTime;
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats.totalRequests++;
        stats.successfulRequests++;
        stats.totalResponseTime += responseTime;
        stats.minResponseTime = Math.min(stats.minResponseTime, responseTime);
        stats.maxResponseTime = Math.max(stats.maxResponseTime, responseTime);
        
        return {
            success: true,
            responseTime,
            status: response.status,
            data: response.data
        };
    } catch (error) {
        const endTime = performance.now();
        const responseTime = endTime - startTime;
        
        stats.totalRequests++;
        stats.failedRequests++;
        stats.errors.push({
            url,
            method,
            error: error.message,
            responseTime
        });
        
        return {
            success: false,
            responseTime,
            error: error.message
        };
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Health Check
async function loadTestHealthCheck(duration = 10000) {
    console.log(`üè• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Health Check ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ${duration/1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`);
    
    const startTime = Date.now();
    const promises = [];
    
    while (Date.now() - startTime < duration) {
        for (let i = 0; i < CONCURRENT_REQUESTS; i++) {
            promises.push(measureResponseTime(`${BASE_URL}/health`));
        }
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        await Promise.all(promises.splice(0, CONCURRENT_REQUESTS));
        
        // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Health Check ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô MCP Server ‡πÅ‡∏ö‡∏ö concurrent
async function loadTestServerRegistration(count = 50) {
    console.log(`üìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ${count} ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...`);
    
    const promises = [];
    const registeredServers = [];
    
    for (let i = 0; i < count; i++) {
        const testServer = {
            name: `test-server-${i}`,
            url: `http://localhost:${8080 + i}`,
            capabilities: ['chat', 'completion'],
            metadata: {
                version: '1.0.0',
                description: `Test Server ${i}`
            }
        };
        
        promises.push(
            measureResponseTime(
                `${BASE_URL}/api/servers/register`,
                'POST',
                testServer
            ).then(result => {
                if (result.success && result.data.id) {
                    registeredServers.push(result.data.id);
                }
                return result;
            })
        );
    }
    
    await Promise.all(promises);
    console.log(`‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${registeredServers.length}/${count})`);
    
    return registeredServers;
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MCP Servers ‡πÅ‡∏ö‡∏ö concurrent
async function loadTestGetServers(duration = 5000) {
    console.log(`üìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ${duration/1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`);
    
    const startTime = Date.now();
    const promises = [];
    
    while (Date.now() - startTime < duration) {
        for (let i = 0; i < CONCURRENT_REQUESTS; i++) {
            promises.push(measureResponseTime(`${BASE_URL}/api/servers`));
        }
        
        await Promise.all(promises.splice(0, CONCURRENT_REQUESTS));
        await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    console.log('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Service Discovery ‡πÅ‡∏ö‡∏ö concurrent
async function loadTestServiceDiscovery(duration = 5000) {
    console.log(`üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Service Discovery ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ${duration/1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...`);
    
    const capabilities = ['chat', 'completion', 'search', 'analysis'];
    const startTime = Date.now();
    const promises = [];
    
    while (Date.now() - startTime < duration) {
        for (let i = 0; i < CONCURRENT_REQUESTS; i++) {
            const capability = capabilities[i % capabilities.length];
            promises.push(
                measureResponseTime(`${BASE_URL}/api/discovery/capabilities/${capability}`)
            );
        }
        
        await Promise.all(promises.splice(0, CONCURRENT_REQUESTS));
        await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    console.log('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Service Discovery ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}

// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ
async function cleanupServers(serverIds) {
    console.log(`üóëÔ∏è ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${serverIds.length} ‡∏ï‡∏±‡∏ß...`);
    
    const promises = serverIds.map(id => 
        measureResponseTime(`${BASE_URL}/api/servers/${id}`, 'DELETE')
    );
    
    await Promise.all(promises);
    console.log('‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function displayStats() {
    console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:');
    console.log('=' .repeat(50));
    console.log(`üìà ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.totalRequests}`);
    console.log(`‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${stats.successfulRequests}`);
    console.log(`‚ùå ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${stats.failedRequests}`);
    console.log(`üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${((stats.successfulRequests / stats.totalRequests) * 100).toFixed(2)}%`);
    
    if (stats.successfulRequests > 0) {
        const avgResponseTime = stats.totalResponseTime / stats.successfulRequests;
        console.log(`‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${avgResponseTime.toFixed(2)} ms`);
        console.log(`‚ö° ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ${stats.minResponseTime.toFixed(2)} ms`);
        console.log(`üêå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ${stats.maxResponseTime.toFixed(2)} ms`);
        console.log(`üöÄ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ: ${(stats.successfulRequests / (TEST_DURATION / 1000)).toFixed(2)} req/s`);
    }
    
    if (stats.errors.length > 0) {
        console.log('\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:');
        stats.errors.slice(0, 5).forEach((error, index) => {
            console.log(`${index + 1}. ${error.url} (${error.method}): ${error.error}`);
        });
        if (stats.errors.length > 5) {
            console.log(`... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${stats.errors.length - 5} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î`);
        }
    }
}

// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
function resetStats() {
    stats = {
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        totalResponseTime: 0,
        minResponseTime: Infinity,
        maxResponseTime: 0,
        errors: []
    };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
async function runPerformanceTests() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Central MCP Server\n');
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    resetStats();
    
    try {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Health Check
        await loadTestHealthCheck(5000);
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        const registeredServers = await loadTestServerRegistration(20);
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        await loadTestGetServers(5000);
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Service Discovery
        await loadTestServiceDiscovery(5000);
        
        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        if (registeredServers.length > 0) {
            await cleanupServers(registeredServers);
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        displayStats();
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
    }
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    runPerformanceTests().catch(console.error);
}

module.exports = {
    measureResponseTime,
    loadTestHealthCheck,
    loadTestServerRegistration,
    loadTestGetServers,
    loadTestServiceDiscovery,
    cleanupServers,
    displayStats,
    resetStats,
    runPerformanceTests
};