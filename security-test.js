/**
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Central MCP Server
 * Security test file for Central MCP Server
 */

const axios = require('axios');
const crypto = require('crypto');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const BASE_URL = 'http://localhost:3000';
const ADMIN_TOKEN = process.env.ADMIN_TOKEN || 'your-admin-token-here';
const SERVER_TOKEN = process.env.SERVER_TOKEN || 'your-server-token-here';

// ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
let testResults = {
    passed: 0,
    failed: 0,
    tests: []
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function recordTest(testName, passed, message = '') {
    testResults.tests.push({
        name: testName,
        passed,
        message,
        timestamp: new Date().toISOString()
    });
    
    if (passed) {
        testResults.passed++;
        console.log(`‚úÖ ${testName}: ${message}`);
    } else {
        testResults.failed++;
        console.log(`‚ùå ${testName}: ${message}`);
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ token
async function testUnauthorizedAccess() {
    console.log('\nüîí ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï...');
    
    const protectedEndpoints = [
        { method: 'POST', path: '/api/servers/register' },
        { method: 'DELETE', path: '/api/servers/test-server' },
        { method: 'GET', path: '/api/monitoring/stats' },
        { method: 'GET', path: '/api/load-balancer/stats' }
    ];
    
    for (const endpoint of protectedEndpoints) {
        try {
            const response = await axios({
                method: endpoint.method,
                url: `${BASE_URL}${endpoint.path}`,
                validateStatus: () => true // ‡πÑ‡∏°‡πà throw error ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö status codes
            });
            
            if (response.status === 401 || response.status === 403) {
                recordTest(
                    `Unauthorized access to ${endpoint.method} ${endpoint.path}`,
                    true,
                    `‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (${response.status})`
                );
            } else {
                recordTest(
                    `Unauthorized access to ${endpoint.method} ${endpoint.path}`,
                    false,
                    `‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (${response.status})`
                );
            }
        } catch (_) {
            recordTest(
                `Unauthorized access to ${endpoint.method} ${endpoint.path}`,
                true,
                '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Network Error)'
            );
        }
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ token ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
async function testInvalidToken() {
    console.log('\nüîë ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ token ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...');
    
    const invalidTokens = [
        'invalid-token',
        'Bearer invalid-token',
        '',
        'null',
        'undefined',
        crypto.randomBytes(32).toString('hex')
    ];
    
    for (const token of invalidTokens) {
        try {
            const response = await axios({
                method: 'GET',
                url: `${BASE_URL}/api/monitoring/stats`,
                headers: {
                    'Authorization': token.startsWith('Bearer ') ? token : `Bearer ${token}`
                },
                validateStatus: () => true
            });
            
            if (response.status === 401 || response.status === 403) {
                recordTest(
                    `Invalid token test: ${token.substring(0, 10)}...`,
                    true,
                    `‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (${response.status})`
                );
            } else {
                recordTest(
                    `Invalid token test: ${token.substring(0, 10)}...`,
                    false,
                    `‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (${response.status})`
                );
            }
        } catch (_) {
            recordTest(
                `Invalid token test: ${token.substring(0, 10)}...`,
                true,
                '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Network Error)'
            );
        }
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
async function testValidToken() {
    console.log('\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...');
    
    const tokens = [
        { name: 'Admin Token', token: ADMIN_TOKEN },
        { name: 'Server Token', token: SERVER_TOKEN }
    ];
    
    for (const { name, token } of tokens) {
        if (!token || token === 'your-admin-token-here' || token === 'your-server-token-here') {
            recordTest(
                `Valid token test: ${name}`,
                false,
                'Token ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô environment variables'
            );
            continue;
        }
        
        try {
            const response = await axios({
                method: 'GET',
                url: `${BASE_URL}/api/monitoring/stats`,
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                validateStatus: () => true
            });
            
            if (response.status === 200) {
                recordTest(
                    `Valid token test: ${name}`,
                    true,
                    '‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
                );
            } else {
                recordTest(
                    `Valid token test: ${name}`,
                    false,
                    `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ (${response.status})`
                );
            }
        } catch (error) {
            recordTest(
                `Valid token test: ${name}`,
                false,
                `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
            );
        }
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL Injection
async function testSQLInjection() {
    console.log('\nüíâ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL Injection...');
    
    const sqlInjectionPayloads = [
        "'; DROP TABLE servers; --",
        "' OR '1'='1",
        "'; DELETE FROM servers WHERE '1'='1'; --",
        "' UNION SELECT * FROM users --",
        "admin'--",
        "admin'/*"
    ];
    
    for (const payload of sqlInjectionPayloads) {
        try {
            const response = await axios({
                method: 'GET',
                url: `${BASE_URL}/api/servers/${encodeURIComponent(payload)}`,
                validateStatus: () => true
            });
            
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ response ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 404 ‡∏´‡∏£‡∏∑‡∏≠ 400 ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            if (response.status === 404 || response.status === 400) {
                recordTest(
                    `SQL Injection test: ${payload.substring(0, 20)}...`,
                    true,
                    '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
                );
            } else {
                recordTest(
                    `SQL Injection test: ${payload.substring(0, 20)}...`,
                    false,
                    `‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà (${response.status})`
                );
            }
        } catch (_) {
            recordTest(
                `SQL Injection test: ${payload.substring(0, 20)}...`,
                true,
                '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Network Error)'
            );
        }
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS
async function testXSSProtection() {
    console.log('\nüï∑Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS...');
    
    const xssPayloads = [
        '<script>alert("XSS")</script>',
        '<img src=x onerror=alert("XSS")>',
        'javascript:alert("XSS")',
        '<svg onload=alert("XSS")>',
        '"><script>alert("XSS")</script>'
    ];
    
    for (const payload of xssPayloads) {
        try {
            const testServer = {
                name: payload,
                url: 'http://localhost:8080',
                capabilities: ['chat'],
                metadata: {
                    description: payload
                }
            };
            
            const response = await axios({
                method: 'POST',
                url: `${BASE_URL}/api/servers/register`,
                data: testServer,
                headers: {
                    'Authorization': `Bearer ${SERVER_TOKEN}`,
                    'Content-Type': 'application/json'
                },
                validateStatus: () => true
            });
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÑ‡∏°‡πà‡∏°‡∏µ script tags
            const responseText = JSON.stringify(response.data);
            if (responseText.includes('<script>') || responseText.includes('javascript:')) {
                recordTest(
                    `XSS Protection test: ${payload.substring(0, 20)}...`,
                    false,
                    '‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà XSS'
                );
            } else {
                recordTest(
                    `XSS Protection test: ${payload.substring(0, 20)}...`,
                    true,
                    '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
                );
            }
            
            // ‡∏•‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
            if (response.status === 201 && response.data.id) {
                await axios.delete(`${BASE_URL}/api/servers/${response.data.id}`, {
                    headers: { 'Authorization': `Bearer ${SERVER_TOKEN}` }
                }).catch(() => {});
            }
            
        } catch (_) {
            recordTest(
                `XSS Protection test: ${payload.substring(0, 20)}...`,
                true,
                '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            );
        }
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rate Limiting
async function testRateLimiting() {
    console.log('\nüö¶ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rate Limiting...');
    
    const requests = [];
    const maxRequests = 100; // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ 100 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÜ
    
    for (let i = 0; i < maxRequests; i++) {
        requests.push(
            axios({
                method: 'GET',
                url: `${BASE_URL}/health`,
                validateStatus: () => true
            })
        );
    }
    
    try {
        const responses = await Promise.all(requests);
        const rateLimitedResponses = responses.filter(r => r.status === 429);
        
        if (rateLimitedResponses.length > 0) {
            recordTest(
                'Rate Limiting test',
                true,
                `Rate limiting ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (${rateLimitedResponses.length}/${maxRequests} requests ‡∏ñ‡∏π‡∏Å rate limit)`
            );
        } else {
            recordTest(
                'Rate Limiting test',
                false,
                '‡πÑ‡∏°‡πà‡∏°‡∏µ rate limiting ‡∏´‡∏£‡∏∑‡∏≠ limit ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'
            );
        }
    } catch (error) {
        recordTest(
            'Rate Limiting test',
            false,
            `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
        );
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö CORS Headers
async function testCORSHeaders() {
    console.log('\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö CORS Headers...');
    
    try {
        const response = await axios({
            method: 'OPTIONS',
            url: `${BASE_URL}/api/servers`,
            headers: {
                'Origin': 'http://malicious-site.com',
                'Access-Control-Request-Method': 'POST'
            },
            validateStatus: () => true
        });
        
        const corsHeaders = {
            'access-control-allow-origin': response.headers['access-control-allow-origin'],
            'access-control-allow-methods': response.headers['access-control-allow-methods'],
            'access-control-allow-headers': response.headers['access-control-allow-headers']
        };
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ CORS ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å origin
        if (corsHeaders['access-control-allow-origin'] === '*') {
            recordTest(
                'CORS Headers test',
                false,
                '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï origin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (*) ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
            );
        } else {
            recordTest(
                'CORS Headers test',
                true,
                'CORS headers ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°'
            );
        }
    } catch (error) {
        recordTest(
            'CORS Headers test',
            false,
            `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
        );
    }
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function displaySecurityTestResults() {
    console.log('\nüõ°Ô∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:');
    console.log('=' .repeat(60));
    console.log(`‚úÖ ‡∏ú‡πà‡∏≤‡∏ô: ${testResults.passed}`);
    console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô: ${testResults.failed}`);
    console.log(`üìä ‡∏£‡∏ß‡∏°: ${testResults.tests.length}`);
    console.log(`üéØ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${((testResults.passed / testResults.tests.length) * 100).toFixed(2)}%`);
    
    if (testResults.failed > 0) {
        console.log('\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô:');
        testResults.tests
            .filter(test => !test.passed)
            .forEach((test, index) => {
                console.log(`${index + 1}. ${test.name}: ${test.message}`);
            });
    }
    
    console.log('\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
    if (testResults.failed === 0) {
        console.log('- ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏µ');
    } else {
        console.log('- ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö');
        console.log('- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ authentication ‡πÅ‡∏•‡∏∞ authorization');
        console.log('- ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° security headers ‡πÅ‡∏•‡∏∞ input validation');
    }
}

// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function resetTestResults() {
    testResults = {
        passed: 0,
        failed: 0,
        tests: []
    };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
async function runSecurityTests() {
    console.log('üõ°Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ Central MCP Server\n');
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    resetTestResults();
    
    try {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
        await testUnauthorizedAccess();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        await testInvalidToken();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        await testValidToken();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL Injection
        await testSQLInjection();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS
        await testXSSProtection();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Rate Limiting
        await testRateLimiting();
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö CORS Headers
        await testCORSHeaders();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        displaySecurityTestResults();
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:', error.message);
    }
    
    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    runSecurityTests().catch(console.error);
}

module.exports = {
    testUnauthorizedAccess,
    testInvalidToken,
    testValidToken,
    testSQLInjection,
    testXSSProtection,
    testRateLimiting,
    testCORSHeaders,
    displaySecurityTestResults,
    resetTestResults,
    runSecurityTests,
    testResults
};